1)React is a Javascript Library
2)React is hosted on the CDN Link(Content Delivery Network) - while basic application setup 
3)Cross Origin - A mechanism which allows web application to access the resources from the different domains
4)For importing the react into application , need to add the 2 script files from the CDN into the index.html file which is React and React DOM
5)React element is an object and while rendering using react.render() the object will convert to an element.
6)We can inject React into any of the frame works like for examples sider bar , header and all with some imports, thats y we call it as a javascript Library.
7)Package.json file is a configuration for NPM.
8)NPM is a package manager
9)Bundlers: 
    webpack
    parcel
    wheat
10)npm install -D parcel
     -D: this tell package manager to install this particular package as a dev dependency
11)There are 2 dependencies 
    Dev dependencies - These will be useful while developing 
    dependencies - This will be used in production mode
12)Symbols before packages  
    caret(^) - Which will upgared the minor version if in case there is any minor version update happend on the package 
    tilde(~) -  Which will upgrade the major version directly in case there is a major version of the package released.
13)Package.lock json
    it is an important file which will track the exact version installed in our application and it has an integrity where it will maintain the hash to make sure we are using the same version in out local and the production.
14)Node_Modules 
    it is like a date base where it will hold all the code required by packages 
15)Tentative dependencies: 
    if u install one package and if u see in node module there will be lot of other things created along with ur package , because the package we installed has again dependencies and that dependencies again have some dependencies so that's why the node modules is Huge!.
16)we can add node modules into git ignore as we can regenerate the dependencies using the package and package lock json so there is no need of pushing node modules into git.
17)npx parcel index.html
    npx command is used to execute a package where as npm is used to install a package
18)Importing React through cdn links is not a good practice becoz every time we have to call another network to bring react so its easy when we install react and get Rect from node modules
19)Parcel will do magic, it can do... 
    - Dev Build
    - Creates a local server, and host our application into server
    - Auto Refresh when there is a change
    - it uses HMR - hot module replacement which will track all the files which we are updating
    - File watcher algorithm , which keeps track of all file changes which are changing realtime and tell server to reload
    - It will remove cache and makes build faster
    - Image optimization
    - Minfication our file for our production Build.
    - Bundling
    - Compress the file and ship into production
    - Differential Bundling - Parcel will take of bundling and gives smoother performace on web browsers where ever or any browser version u install ur application, it will give you support of older browsers
    - Code splitting
    - Diagnostic: Error Handling
    - Https
    - Tree Shaking - It will remove unused code 
    - it will create diff builds for dev and prod
20)Remove "main: ''" from package json as the npm gives it by default , which will throw an error while doing builds
21)For prod build   
    - npx parcel build index.html
    - it will create a prod build and put it in a dist folder.
    For dev build
    - npx parcel index.html
    - it will create a build and put it in a dist folder.
22)dist: 
    - Build folder created by parcel
    - main files like index.html, index.js and index.css which is compressed code of all our files
23)No need to push the files into git which can be regenerated in the server using the commands like npm i or npx parcel indx.html 
24)Browsers List: We need to tell our application in what are all the browsers our application should support along with the version
    - For this we need to configure this in package.json as "browserslist" : ["last 2 versions"]
    - this details we can fetch from the browserlist.dev website
25)Scripts:
    - scripts in package.json files used to run the code using the command of 
        -npm run start or npm start
    - and for build
        - npm run build
    scripts: [
        "start": "parcel index.html",
        "build:"parcel build index.html"
    ]
26)React.createElement will create an object and ReactDom.createRoot will convert this to an html ele and this will render into DOM by using the render() method.
27)JSX 
    - JSX is not html in JS
    - JSX is diff, html is diff and react is diff
    - JSX is HTML like syntax or XML like syntax
    - The code is traspiled before it reaches JS Engine and this will done by Parcel using Babel.
    - JSx is converted to createElement by the end of the day by Babel
    - JSX is also a mix of JS and HTML 
     we can use {} and write js in b/w jsx
     - JSX will take care of cross side scripting, it will sanatize 
28)Babel 
    - Babel is a javascript converter or transpiler it takes jsx and coverts it to react code
    - Converts the code token by token
    - Babel will understand the elelments by finding the angular bracket "<" 
29)If u want to give attributes to jsx it should be in camel case
30)VS Code Extensions which will make coders life easy
    - Prettier-code: formats the code
    - Bracket Pair Colorization toggler : It will changes the brackets like chain brackets
    - Eslint
    - Better Comments
31)React Components: 2 ways of creating components
    - 2 types of components we have 
        1) Class Based components
            - Old way of writing the code
            - uses JS classes
        2) Functional Components 
            - New Way of writing the code
            - Uses JS Functions
    - React functional components are normal JS functions which returns JSX code or React elements
32)Always create components with camelcase 
33)We can render the react component by using root.render(<TestComponent />)
    - this is how babel will understand this is a component as mentioned previously Babel will understand the html by <  angualr code
34)Component Composition 
    - Component composition is nothing but 2 components composed inside one another.
35)we can use normal function or arrow function to execute the code, but arrow functions is the new way
36)We can render html element also in the component using {} and keeping the element into the curley brackets, as the jsx is like mix and match with js and jsx and the react element is nothing but an obj
37)You can call jasvascript functions components in the {} as functions 
/////////////////////////////////EP-04/////////////////////////

38)Planning For an Application 
    - Name of your app
    - mockup
    - application structure 

39)Basic planning for our food application component structure
    - Header
        - Logo component
        - Nav bar with some links
    - Body 
        - Search 
        - Resto container for restaurents
            - Resto Card
    - Footer
        - copy right info and 
        - Some Links
        - About US
40)Props: - Properties or passing an argumenets to a function
    - we can pass n number of arguments and react will take it as an object
    = (props) => {}
    - destructuring on the fly means we can take arguments as {} inside function like =({name, age}) => {}

41)Config Driven UI: 
    - website driven by configs (data) 
       - for example swiggy will looks like diff in places, diff offers in diff places
42)"Key" is an important thing in React and it should be given for the elements when we are looping as it increases the application performance.
    - If there is no key react does not know where to update the new element in case if new element added or delted and it will treat all the elements are same and it will render all the elements again.
    - if we give a unique id , and a new ele comes also react know the existings all and it wont render the existing elements and it will render only the new one which increase the Optimization.
43) React will never take indexes as KEYS and it wont recommend to use index as key if the order of the element changes , it may negatively impact the performance and may cause issue with the component state.

#####################React Hooks###########################

44) 2 types of Export/import
    1) Default Export/Import
        export default Component
        import Component from "path"
    2) Named Export/Import
        export const Component
        import { Component } from "path"
    unless we are using 2 exports in same file its better to use the default export
45) React hooks are normal JS utility functions which is given to us by React, the only thing is that function has some power where the logics has written in background.
46)there are multiple hooks in react and there are 2 very important Hooks 
    1)useState(): 
        - This is used to give superpowerful react state variables.
        - we have to import it from "react" and we have to import it as named import which is like 
        import { useState } from "react"
        - useState is used to create a state variable 
        State Variable : 
            - it maintain the state of your component
        - this superpowerful variable makes UI layer sync with the data layer and this is known as Render
        - whenever the state variable updates react rerender the components.
        - Rerender component means whenever a state variable changes react will update the ui quickly.
        - By using this state variable it give a power when the data layer update ui layer will be update this is done rendering.
        - React will make DOM operations superfast 
        - React will keep an eye on this special variable so whenever the variable update it will update the DOM 
    2)useEffect()


46)React Algorithim 
    React uses Reconciliation Algorithim as also known as React Fiber(React 16) uses to update the DOM.

47)Virtual DOM: 
    It is not an actual DOM, virtual dom is an representation of actual DOM, this react virutal Dom is nothing but an object
48)Diff Alogorithm 
    this algorithm tries to find the diff b/w the old virtal DOM and new virtual DOM and it will calculate the diff and update the actual DOM on every render CYCLE
    Document for React Fiber : 
    https://github.com/acdlite/react-fiber-architecture
49)Finding out the diff b/w 2 elements is difficult and finding diff b/w the objects is easy this is why the react is fast, bcoz react elements is nothing but an object.
50) React is doing efficient DOM manaupulations bcoz it has some feature like 
    - Virtual DOM 
    - builds its own algorithm to find the diff b/w the objects and update the actual DOM using diff Algorithm  